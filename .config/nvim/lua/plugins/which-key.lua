local api = require("remote-sshfs.api")
return {
	"folke/which-key.nvim",
	event = "VeryLazy",
	opts = {},
	keys = {
		{ "<leader><leader>", require("telescope.builtin").buffers,      desc = "Find Existing Buffers" },
		{
			"<leader>/",
			function()
				require("telescope.builtin").current_buffer_fuzzy_find(require("telescope.themes").get_dropdown({
					winblend = 10,
					previewer = true,
				}))
			end,
			desc = "Fuzzy Search in Current Buffer",
		},
		{ "<leader>z",        "<cmd>ZenMode<CR>",                        desc = "Zen Mode" },
		{ "<leader>e",        "<cmd>Oil<CR>",                            desc = "File Explorer" },
		{ "dp",               vim.diagnostic.goto_prev,                  desc = "Previous Diagnostic" },
		{ "dn",               vim.diagnostic.goto_next,                  desc = "Next Diagnostic" },
		{ "do",               vim.diagnostic.open_float,                 desc = "Open Diagnostic in Floating Window" },
		{ "<C-h>",            "<cmd>ZellijNavigateLeft<CR>",             desc = "Zellij Left" },
		{ "<C-j>",            "<cmd>ZellijNavigateDown<CR>",             desc = "Zellij Down" },
		{ "<C-k>",            "<cmd>ZellijNavigateUp<CR>",               desc = "Zellij Up" },
		{ "<C-l>",            "<cmd>ZellijNavigateRight<CR>",            desc = "Zellij Right" },
		{ "<leader>s",        group = "search" },
		{ "<leader>sf",       require("telescope.builtin").find_files,   desc = "All Files in CWD" },
		{ "<leader>sr",       require("telescope.builtin").oldfiles,     desc = "Recent Files" },
		{ "<leader>sh",       require("telescope.builtin").help_tags,    desc = "Help Tags" },
		{ "<leader>sw",       require("telescope.builtin").grep_string,  desc = "Current Word" },
		{ "<leader>sg",       require("telescope.builtin").live_grep,    desc = "Live Grep" },
		{ "<leader>sd",       require("telescope.builtin").diagnostics,  desc = "Diagnostics" },
		{ "<leader>sF",       require("telescope.builtin").git_files,    desc = "Git-Tracked Files" },
		{ "<leader>sc",       require("telescope.builtin").git_commits,  desc = "Git Commits" },
		{ "<leader>sb",       require("telescope.builtin").git_branches, desc = "Git Branches" },
		{ "<leader>ss",       require("telescope.builtin").git_stash,    desc = "Git Stashes" },
		{ "<leader>sk",       require("telescope.builtin").keymaps,      desc = "Keymaps" },
		{ "<leader>b",        group = "Buffers" },
		{ "<leader>bc",       "<cmd>bd!<CR>",                            desc = "Close Buffer" },
		{ "<leader>bC",       "<cmd>%bd | e# | bd#<CR>",                 desc = "Close All Other Buffers" },
		{
			"<leader>bs",
			function()
				vim.api.nvim_command("enew")
				vim.api.nvim_command("file Scratch")
				vim.api.nvim_command("setlocal buftype=nofile")
				vim.api.nvim_command("setlocal bufhidden=wipe")
				vim.api.nvim_command("setlocal noswapfile")
			end,
			desc = "Scratch Buffer",
		},
		{ "<leader>g",  group = "Git" },
		{ "<leader>gs", "<cmd>Neogit<CR>",                desc = "Status" },
		{ "<leader>gb", "<cmd>Gitsigns blame_line<CR>",   desc = "Blame" },
		{ "<leader>gt", "<cmd>Gitsigns toggle_signs<CR>", desc = "Signs" },
		{ "<leader>d",  group = "debugger" },
		{ "<leader>dc", require("dap").continue,          desc = "Continue" },
		{ "<leader>do", require("dap").step_over,         desc = "Step Over" },
		{ "<leader>di", require("dap").step_into,         desc = "Step Into" },
		{ "<leader>dO", require("dap").step_out,          desc = "Step Out" },
		{ "<leader>db", require("dap").toggle_breakpoint, desc = "Toggle Breakpoint" },
		{ "<leader>dB", require("dap").set_breakpoint,    desc = "Set Conditional Breakpoint" },
		{ "<leader>dL", require("dap").set_breakpoint,    desc = "Set Log Point" },
		{ "<leader>dr", require("dap").repl.open,         desc = "Open REPL" },
		{ "<leader>dL", require("dap").run_last,          desc = "Run Last Debug Adapter" },
		{ "<leader>dt", require("dapui").toggle,          desc = "Toggle UI" },
		{ "<leader>dR", require("dap").restart,           desc = "Restart Session" },
		{ "<leader>dl", require("dap").list_breakpoints,  desc = "List Breakpoints" },
		{ "<leader>dC", require("dap").clear_breakpoints, desc = "Clear Breakpoints" },
		{ "<leader>dT", require("dap").terminate,         desc = "Terminate Session" },
		{ "<leader>w",  group = "Windows" },
		{ "<leader>wh", "<C-w>h",                         "Left" },
		{ "<leader>wj", "<C-w>j",                         "Down" },
		{ "<leader>wk", "<C-w>k",                         "Up" },
		{ "<leader>wl", "<C-w>l",                         "Right" },
		{ "<leader>wv", "<C-w>v<C-w>l",                   "Vertical Split" },
		{ "<leader>ws", "<C-w>s<C-w>j",                   "Horizontal Split" },
		{ "<leader>wr", "<C-w>r",                         "Rotate Clockwise" },
		{ "<leader>wR", "<C-w>R",                         "Rotate Counter Clockwise" },
		{ "<leader>wx", "<C-w>x",                         "Swap" },
		{ "<leader>wX", "<C-w>X",                         "Reverse Swap" },
		{ "<leader>wH", "<C-w>H",                         "Move Window Left" },
		{ "<leader>wJ", "<C-w>J",                         "Move Window Down" },
		{ "<leader>wK", "<C-w>K",                         "Move Window Up" },
		{ "<leader>wL", "<C-w>L",                         "Move Window Right" },
		{ "<leader>we", "<C-w>=",                         "Make all equal size" },
		{ "<leader>w[", "<C-w>[",                         "Increase Window Width" },
		{ "<leader>w]", "<C-w>]",                         "Open Tag in New Window" },
		{ "<leader>w}", "<C-w>}",                         "Preview Tag in New Window" },
		{ "<leader>r",  group = "Remote" },
		{ "<leader>rc", api.connect,                      "SSHFS Connect" },
		{ "<leader>rd", api.disconnect,                   "SSHFS Disconnect" },
		{ "<leader>re", api.edit,                         "Edit SSH Hosts" },
		{ "<leader>rf", api.findfiles,                    "SSHFS File Search" },
		{ "<leader>rg", api.live_grep,                    "SSHFS Text Search" },
	},
}
